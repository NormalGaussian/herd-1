#!/bin/bash
#
# Saggy - GitOps secrets management using SOPS and AGE
#
# Assumption:
#  - There is a folder called "secrets" in the same directory as this script
#  - The "secrets" folder contains the following files:
#    - "age.key" - the private key for AGE; this can be generated using `saggy keygen`
#    - "public-age-keys.json" - a JSON file containing the public keys for age. This is automatically generated when you run `saggy keygen`
#  - There are two folders called "data.decrypted" and "data.encrypted" in the same directory as this script
#  - The "data.decrypted" folder contains a .gitignore file to ignore all of the decrypted files
#  - The "data.encrypted" folder contains a .gitignore file and all of the files that are encrypted using SOPS & age
#   
#  Prefer *not* using the decrypt or encrypt commands. Instead, use the "with" command to run a command on the decrypted files.
#  The "with" command will decrypt the files, run the command, and then delete or encrypt the files.

if ! which age 2>&1 >/dev/null; then
    echo "age is not installed. Please install age." >&2
    exit 1
fi
if ! which sops 2>&1 >/dev/null; then
    echo "sops is not installed. Please install sops." >&2
    exit 1
fi

SCRIPT_DIR="$( cd "$( dirname "$(readlink -f "${BASH_SOURCE[0]}" )" )" &> /dev/null && pwd )"

_SOPS_AGE_KEY_FILE="$SCRIPT_DIR/secrets/age.key"
_PUBLIC_KEYFILE="$SCRIPT_DIR/secrets/public-age-keys.json"
export SOPS_AGE_KEY_FILE="${SOPS_AGE_KEY_FILE:-$_SOPS_AGE_KEY_FILE}"
export PUBLIC_KEYFILE="${PUBLIC_KEYFILE:-$_PUBLIC_KEYFILE}"
export AGE_PUBLIC_KEYS="$(jq -r '["--age", .[]] | join(" ")' "$PUBLIC_KEYFILE")"

encrypt_file() {
    DECRYPTED_FILE="$1"
    ENCRYPTED_FILE="$2"
    sops --encrypt $AGE_PUBLIC_KEYS "$DECRYPTED_FILE" > "$ENCRYPTED_FILE"
}

encrypt_folder() {
    FROM="$(end_with_slash "$1")"
    TO="$(end_with_slash "$2")"
    echo "Encrypting files in $FROM and saving to $TO:"
    find "$FROM" -type f | while read -r RAW_DECRYPTED_FILE; do
        DECRYPTED_FILE="${RAW_DECRYPTED_FILE#$FROM}"

        BASENAME="$(basename "$DECRYPTED_FILE")"
        if [[ "$BASENAME" == *.* ]]; then
            SUFFIX="${BASENAME##*.}"
            ENCRYPTED_FILE="${DECRYPTED_FILE%.*}.sops.$SUFFIX"
        else
            ENCRYPTED_FILE="$DECRYPTED_FILE.sops"
        fi

        echo -e "\t$DECRYPTED_FILE"

        mkdir -p "$(dirname "$TO$ENCRYPTED_FILE")"
        encrypt_file "$FROM$DECRYPTED_FILE" "$TO$ENCRYPTED_FILE"
    done

}

end_with_slash() {
    if [[ "$1" != */ ]]; then
        echo "$1/"
    else
        echo "$1"
    fi
}

decrypt_file() {
    ENCRYPTED_FILE="$1"
    DECRYPTED_FILE="$2"
    sops --decrypt "$ENCRYPTED_FILE" > "$DECRYPTED_FILE"
}

decrypt_folder() {
    FROM="$(end_with_slash "$1")"
    TO="$(end_with_slash "$2")"

    echo "Decrypting files in $FROM and saving to $TO:" 
    find "$FROM" -type f | while read -r RAW_ENCRYPTED_FILE; do
        ENCRYPTED_FILE="${RAW_ENCRYPTED_FILE#$FROM}"

        BASENAME="$(basename "$ENCRYPTED_FILE")"
        if [[ "$BASENAME" == *.sops.* ]]; then
            SUFFIX="${BASENAME##*.}"
            DECRYPTED_FILE="${ENCRYPTED_FILE%.sops.*}.$SUFFIX"
        elif [[ "$BASENAME" == *.sops ]]; then
            DECRYPTED_FILE="${ENCRYPTED_FILE%.sops}"
        else
            continue
        fi

        echo -e "\t$DECRYPTED_FILE"
        mkdir -p "$(dirname "$TO$ENCRYPTED_FILE")"

        decrypt_file "$FROM$ENCRYPTED_FILE" "$TO$DECRYPTED_FILE"
    done
}

## "encrypt with <file or folder> -- <command>"
## e.g. "encrypt with herd-1 -- talosctl apply {}/talos/controlplane.yaml"
with() {
    FILE_OR_FOLDER="$1"
    shift
    MODE="read"
    if [[ -n "$1" ]] && [[ "$1" != "--" ]]; then
        if [[ "$2" == "-r" ]] || [[ "$2" == "--read" ]]; then
            MODE="read"
        elif [[ "$2" == "-w" ]] || [[ "$2" == "--write" ]]; then
            MODE="write"
        fi
        shift
    fi

    # Extract the command, which is everything after "--"
    while [[ -n "$1" ]] && [[ "$1" != "--" ]]; do
        shift
    done
    shift
    COMMAND="$@"
    if [[ -z "$COMMAND" ]]; then
        echo "No command provided"
        exit 1
    fi

    if [[ ! -e "$FILE_OR_FOLDER" ]]; then
        echo "File or folder does not exist: $FILE_OR_FOLDER"
        exit 1
    fi

    FOLDER=""
    FILE=""

    if [[ -d "$FILE_OR_FOLDER" ]]; then
        FOLDER="$FILE_OR_FOLDER"
    elif [[ -f "$FILE_OR_FOLDER" ]]; then
        FILE="$FILE_OR_FOLDER"
    else
        echo "path must be a file or a folder - not some other device: $FILE_OR_FOLDER"
        exit 1
    fi

    if [[ -n "$FOLDER" ]]; then
        # With folder
        
        # Create the temporary folder and ensure it is deleted
        TMP_FOLDER="$(mktemp -d)"
        mkdir -p "$TMP_FOLDER"
        trap "rm -rf $TMP_FOLDER" EXIT

        # Replace the {} with the folder
        COMMAND="${COMMAND//\{\}/$TMP_FOLDER}"

        # Decrypt the folder    
        decrypt_folder "$FOLDER" "$TMP_FOLDER"
        
        # Run the command
        eval "$COMMAND"

        # If mode is "write", then we want to save the changes
        # TODO: handle deleted files
        if [[ "$MODE" == "write" ]]; then
            encrypt_folder "$TMP_FOLDER" "$FOLDER"
        fi

    else
        # With file

        # Create the temporary file and ensure it is deleted
        TMP_FILE="$(mktemp)"
        trap "rm -f $TMP_FILE" EXIT
        
        # Replace the {} with the file
        COMMAND="${COMMAND//\{\}/$TMP_FILE}"

        # Decrypt the file
        decrypt_file "$FILE" "$TMP_FILE"

        # Run the command
        eval "$COMMAND"

        # If mode is "write", then we want to save the changes
        if [[ "$MODE" == "write" ]]; then
            encrypt_file "$TMP_FILE" "$FILE"
        fi
    fi
}

cmd="$1"
shift
case "$cmd" in
    encrypt)
        for FOLDER in `ls -1 "$SCRIPT_DIR/clusters.decrypted"; do
            encrypt_folder "$SCRIPT_DIR/clusters.decrypted/$FOLDER" "$SCRIPT_DIR/clusters.encrypted/$FOLDER"
        done
        ;;
    decrypt)
        for FOLDER in `ls -1 "$SCRIPT_DIR/clusters.encrypted"; do
            decrypt_folder "$SCRIPT_DIR/clusters.encrypted/$FOLDER" "$SCRIPT_DIR/clusters.decrypted/$FOLDER"
        done
        ;;
    keygen)
        if [[ -e "$SCRIPT_DIR/secrets/age.key" ]]; then
            echo "Key already exists - to generate a new key, delete the existing key"
            echo "1. Decrypt the folders"
            echo "  $0 decrypt"
            echo "2. Delete the key"
            echo "  rm \"./secrets/age.key\""
            echo "2. Delete it from the public keys file"
            echo "  vi \"./secrets/public-age-keys.json\""
            echo "3. Run this command again"
            echo "  $0 keygen"
            echo "4. Encrypt the folders"
            echo "  $0 encrypt"
            # TODO: add command "rotate" to rotate the key
            exit 1
        fi
        # Create the key
        age-keygen -o "$SCRIPT_DIR/secrets/age.key"
        PUBLIC_KEY="$(age-keygen -y "$SCRIPT_DIR/secrets/age.key")"
        
        # Use the hostname as the name for the key
        HOSTNAME="$(hostname)"
        HOSTNAME="${HOSTNAME,,}"

        # Add the public key to the public keys file
        PUBLIC_KEYFILE="$SCRIPT_DIR/secrets/public-age-keys.json"
        cat "$PUBLIC_KEYFILE" | jq ". + {\"${HOSTNAME,,}\": \"$PUBLIC_KEY\"}" > "$PUBLIC_KEYFILE.tmp"
        mv "$PUBLIC_KEYFILE.tmp" "$PUBLIC_KEYFILE"
        ;;

    with)
        with "$@"
        ;;

    *)
        echo "Usage:"
        echo "  $0 decrypt <folder>"
        echo "  $0 encrypt <folder>"
        echo "  $0 keygen"
        echo "  $0 with <folder> -- <command>"
        exit 1
        ;;
esac
